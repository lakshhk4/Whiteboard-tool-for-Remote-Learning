package mywhiteboardapp;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Frame;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JFrame;

/**
 * this frame is where the data sent from the user is drawn.
 * it is the same size as the user's input screen.
 *
 * @author lakshhkhatri
 */
public class NewJFrame extends javax.swing.JFrame {

    // Server
    static Server s;
    
    // this is used to execute threads
    static ExecutorService pool = Executors.newFixedThreadPool(2);
    

    public NewJFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void maint() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                // create another frame. this one will be for displaying all the different panels in one big screen.
                JFrame mainDisplay = new JFrame();
                mainDisplay.setSize(1000, 625);
                mainDisplay.setVisible(true);
                mainDisplay.setResizable(false);
                
                // container for main display frame
                Container contentOnMainDisplay = mainDisplay.getContentPane();
                contentOnMainDisplay.setLayout(new BorderLayout());
                
                // create a Panel, 'mainDisplayer', which is added to the main display frame
                MainDisplay mainDisplayer = new MainDisplay();
                contentOnMainDisplay.add(mainDisplayer, BorderLayout.CENTER);

                // instantiate another frame (belongs to this class) which will be used for receiving 
                // painting data from the user. it will be the same size as the input device.
                // the previous frame, mainDisplay, is where all the 16 panels will be combined and displayed at the same time.
                NewJFrame newJ = new NewJFrame();
                newJ.setVisible(true);
                newJ.setResizable(false);
                
                // container for this frame
                Container content = newJ.getContentPane(); 
                content.setLayout(new BorderLayout());
                
                // draw area (which is a JComponent). it will be added to the newJ frame.
                TestDraw drawArea = new TestDraw(mainDisplayer);
                content.add(drawArea, BorderLayout.CENTER);
                
                // create a server to receive data from client 
                Server s = new Server(drawArea);

                // executes the server thread
                pool.execute(s);
            }
        });

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
